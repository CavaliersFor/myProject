<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.1.xsd 
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-4.1.xsd 
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.1.xsd">

	<context:component-scan base-package="com.knight.mall.service"/>

	<!--配置读取properties文件 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<value>classpath:config-mall.properties</value>
		</property>
	</bean>
	<!--配置数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<!-- <property name="acquireIncrement" value=""> </property> -->

		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<!-- <property name="acquireRetryAttempts" value=""> </property> -->

		<!--两次连接中间隔时间，单位毫秒。Default: 1000 -->
		<!-- <property name="acquireRetryDelay" value=""> </property> -->

		<!--连接关闭时默认将所有未提交的操作回滚。Default: false -->
		<!-- <property name="autoCommitOnClose" value=""> </property> -->
		<!--c3p0将建一张名为Test的空表，并使用其自带的查询语句进行测试。如果定义了这个参数那么 属性preferredTestQuery将被忽略。你不能在这张Test表上进行任何操作，它将只供c3p0测试 
			使用。Default: null -->
		<!-- <property name="automaticTestTable" value=""> </property> -->

		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<!-- <property name="breakAfterAcquireFailure" value=""> </property> -->

		<!--当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出 SQLException,如设为0则无限期等待。单位毫秒。Default: 
			0 -->
		<!-- <property name="checkoutTimeout" value=""> </property> -->

		<!--通过实现ConnectionTester或QueryConnectionTester的类来测试连接。类名需制定全路径。 Default: 
			com.mchange.v2.c3p0.impl.DefaultConnectionTester -->
		<!-- <property name="connectionTesterClassName"></property> -->

		<!--指定c3p0 libraries的路径，如果（通常都是这样）在本地即可获得那么无需设置，默认null即可 Default: null -->
		<!-- <property name="factoryClassLocation"> </property> -->

		<!--Strongly disrecommended. Setting this to true may lead to subtle and 
			bizarre bugs. （文档原文）作者强烈建议不使用的一个属性 -->
		<!-- <property name="forceIgnoreUnresolvedTransactions"> </property> -->

		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<!-- <property name="idleConnectionTestPeriod"> </property> -->

		<!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="${initialPoolSize}">
		</property>

		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="${maxIdleTime}">
		</property>

		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="${maxPoolSize}">
		</property>

		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
		<!-- <property name="maxStatements"> </property> -->

		<!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0 -->
		<!-- <property name="maxStatementsPerConnection"></property> -->

		<!--c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能 通过多线程实现多个操作同时被执行。Default: 
			3 -->
		<property name="numHelperThreads" value="${numHelperThreads}">
		</property>

		<!--当用户调用getConnection()时使root用户成为去获取连接的用户。主要用于连接池连接非c3p0 的数据源时。Default: 
			null -->
		<!-- <property name="overrideDefaultUser"> </property> -->

		<!--与overrideDefaultUser参数对应使用的一个参数。Default: null -->
		<!-- <property name="overrideDefaultPassword"> </property> -->

		<!--密码。Default: null -->
		<property name="password" value="${password}"></property>

		<!--用户修改系统配置参数执行前最多等待300秒。Default: 300 -->
		<!-- <property name="propertyCycle"> </property> -->

		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
			等方法来提升连接测试的性能。Default: false -->
		<!-- <property name="testConnectionOnCheckout"> </property> -->

		<!--如果设为true那么在取得连接的同时将校验连接的有效性。Default: false -->
		<!-- <property name="testConnectionOnCheckin"> </property> -->
		<!--用户名。Default: null -->
		<property name="user" value="${user}"></property>
		<property name="driverClass" value="${driverClass}" />
		<property name="jdbcUrl" value="${url}" />
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 别名扫描的package -->
		<property name="typeAliasesPackage" value="com.knight.mall.model,com.knight.mall.query" />
		<!--mybatis Mapper.xml文件的路径 -->
		<property name="mapperLocations" value="classpath*:mybatis-mapper/*Mapper.xml" />
		<property name="databaseIdProvider" ref="databaseIdProvider" /> 
	</bean>

	 <bean id="databaseIdProvider" class="org.apache.ibatis.mapping.VendorDatabaseIdProvider">
		<property name="properties" ref="vendorProperties" />
	</bean>

	<bean id="vendorProperties"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="properties">
			<props>
				<prop key="Oracle">oracle</prop>
				<prop key="MySQL">mysql</prop>
			</props>
		</property>
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!--mybatis Mapper.java文件的package -->
		<property name="basePackage" value="com.knight.mall.mappers" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<!-- 事务管理器（由Spring管理MyBatis的事务） -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 关联数据源 -->
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<bean id="transactionTemplate"
		class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="transactionManager" />
	</bean>
	<!-- 支持 @Transactional 标记 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
</beans>