<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.knight.mall.mappers.PanicBuyingProductMapper">
	<resultMap id="panicBuyingProductMap" type="panicBuyingProduct">		
					<id column="id" property="id"/><!-- 主键id -->			
					<result column="GMT_CREATE" property="gmtCreate"/><!-- 创建时间 -->			
					<result column="GMT_MODIFY" property="gmtModify"/><!-- 修改时间 -->			
					<result column="product_id" property="productId"/><!-- 商品id -->			
					<result column="num" property="num"/><!-- 抢购数量 -->			
					<result column="status" property="status"/><!-- 状态1：抢购中2：抢购完 -->			
					<result column="support_area" property="supportArea"/><!-- 适用地区(全部支持就选择 全部,多个地区用,隔开) -->			
					<result column="postage" property="postage"/><!-- 邮费 -->			
					<result column="sale_num" property="saleNum"/><!-- 销量 -->			
					<result column="pb_id" property="pbId"/><!-- 抢购表id -->			
					<result column="price" property="price"/><!-- 售价 -->			
			</resultMap>

	<insert id="insert" parameterType="panicBuyingProduct"  useGeneratedKeys="true" keyProperty="id" >
				<selectKey databaseId="oracle" keyProperty="id" order="BEFORE" resultType="long">
			select SEQ_panic_buying_product.nextval from dual
		</selectKey>
				insert into
		panic_buying_product(
					<if test="_databaseId == 'oracle'">ID,</if>
			<trim prefix="" prefixOverrides=",">
											,GMT_CREATE
												,GMT_MODIFY
												<if test="productId != null">,product_id</if>
												<if test="num != null">,num</if>
												<if test="status != null">,status</if>
												<if test="supportArea != null">,support_area</if>
												<if test="postage != null">,postage</if>
												<if test="saleNum != null">,sale_num</if>
												<if test="pbId != null">,pb_id</if>
												<if test="price != null">,price</if>
							</trim>		)values(
					<if test="_databaseId == 'oracle'">#{id},</if>
			<trim prefix="" prefixOverrides=",">
														    ,<include refid="common.now" />
															    ,<include refid="common.now" />
												<if test="productId != null">,#{productId,jdbcType=BIGINT}</if>
												<if test="num != null">,#{num,jdbcType=INTEGER}</if>
												<if test="status != null">,#{status,jdbcType=INTEGER}</if>
												<if test="supportArea != null">,#{supportArea,jdbcType=VARCHAR}</if>
												<if test="postage != null">,#{postage,jdbcType=NUMERIC}</if>
												<if test="saleNum != null">,#{saleNum,jdbcType=INTEGER}</if>
												<if test="pbId != null">,#{pbId,jdbcType=BIGINT}</if>
												<if test="price != null">,#{price,jdbcType=NUMERIC}</if>
					        </trim>		)
	</insert>

	<update id="update" parameterType="panicBuyingProduct">
		update panic_buying_product
		<set>			
												<if test="gmtCreate != null">GMT_CREATE=#{gmtCreate,jdbcType=TIMESTAMP},</if>	
																					GMT_MODIFY=<include refid="common.now" />,
																<if test="productId != null">product_id=#{productId,jdbcType=BIGINT},</if>	
																<if test="num != null">num=#{num,jdbcType=INTEGER},</if>	
																<if test="status != null">status=#{status,jdbcType=INTEGER},</if>	
																<if test="supportArea != null">support_area=#{supportArea,jdbcType=VARCHAR},</if>	
																<if test="postage != null">postage=#{postage,jdbcType=NUMERIC},</if>	
																<if test="saleNum != null">sale_num=#{saleNum,jdbcType=INTEGER},</if>	
																<if test="pbId != null">pb_id=#{pbId,jdbcType=BIGINT},</if>	
																<if test="price != null">price=#{price,jdbcType=NUMERIC},</if>	
									</set>		
		where 					 id=#{id}
			</update>
	
	    	<select id="load" parameterType="long" resultMap="panicBuyingProductMap" >
    		select * from panic_buying_product where id=#{id}
    	</select>
	
	<sql id="queryCommonSql">
		FROM panic_buying_product pbp
		<where>
							    								<if test="idArray != null">
						pbp.id in
						<foreach collection="idArray" index="index" item="item" open="(" separator="," close=")">#{item}</foreach>
					</if>
        									    			            								<if test="gmtCreateFrom != null">and pbp.GMT_CREATE >= #{gmtCreateFrom}</if>
						<if test="gmtCreateTo != null">
							<choose>
            					<when test="_databaseId == 'oracle'"><![CDATA[and pbp.GMT_CREATE < #{gmtCreateTo} + 1]]></when>
            					<when test="_databaseId == 'mysql'"><![CDATA[and pbp.GMT_CREATE < date_add(#{gmtCreateTo}, interval 1 day)]]></when>
            				</choose>							
																																											</if>
																													        									    			            								<if test="gmtModifyFrom != null">and pbp.GMT_MODIFY >= #{gmtModifyFrom}</if>
						<if test="gmtModifyTo != null">
							<choose>
            					<when test="_databaseId == 'oracle'"><![CDATA[and pbp.GMT_MODIFY < #{gmtModifyTo} + 1]]></when>
            					<when test="_databaseId == 'mysql'"><![CDATA[and pbp.GMT_MODIFY < date_add(#{gmtModifyTo}, interval 1 day)]]></when>
            				</choose>							
																																											</if>
																													        									    			            								<if test="productId != null">and pbp.product_id = #{productId}</if>												
                            									    			            								<if test="num != null">and pbp.num = #{num}</if>												
                            									    			            		    					<choose>
            				<when test="status != null">and pbp.status = #{status}</when>
            				<when test="statusArray != null">
            					and pbp.status in
            					<foreach collection="statusArray" index="index" item="item" open="(" separator="," close=")">#{item}
            					</foreach>
            				</when>
            				<otherwise>
																	and pbp.status > 0
								            				</otherwise>
            			</choose>
					        									    			            		            			<if test="supportArea != null and supportArea.trim() !=''">and pbp.support_area = #{supportArea}</if>
        			        									    			            								<if test="postageFrom != null">and pbp.postage >= #{postageFrom}</if>
						<if test="postageTo != null"><![CDATA[and pbp.postage <= #{postageTo}]]></if>
					        									    			            								<if test="saleNum != null">and pbp.sale_num = #{saleNum}</if>												
                            									    			            								<if test="pbId != null">and pbp.pb_id = #{pbId}</if>												
                            									    			            								<if test="priceFrom != null">and pbp.price >= #{priceFrom}</if>
						<if test="priceTo != null"><![CDATA[and pbp.price <= #{priceTo}]]></if>
					        							</where>
	</sql>
	
	<sql id="sortSql">		
		<choose>			
			<when test="sort != null and sort.trim() !=''">
				order by ${sort}
			</when>
			<otherwise>
				<if test="sortByDefault">
					order by pbp.GMT_CREATE DESC
				</if>
			</otherwise>
		</choose>
	</sql>

	<select id="queryList" parameterType="panicBuyingProductQuery" resultMap="panicBuyingProductMap">
		<include refid="common.pageBegin" />
		select pbp.id				<choose>
			<when test="columns != null and columns.length>0">
				<foreach collection="columns" index="index" item="item">,${item}</foreach>
			</when>
			<otherwise>
        		        			,pbp.GMT_CREATE
        			        		        			,pbp.GMT_MODIFY
        			        		        			,pbp.product_id
        			        		        			,pbp.num
        			        		        			,pbp.status
        			        		        			,pbp.support_area
        			        		        			,pbp.postage
        			        		        			,pbp.sale_num
        			        		        			,pbp.pb_id
        			        		        			,pbp.price
        			        					</otherwise>
		</choose>
		<include refid="queryCommonSql" />
		<include refid="sortSql" />
		<include refid="common.pageEnd" />
	</select>

	<select id="queryCount" parameterType="panicBuyingProductQuery" resultType="int">
		select count(1)
		<include refid="queryCommonSql" />
	</select>
	
	<update id="updateStatus" parameterType="panicBuyingProduct">		
		update panic_buying_product set status=#{status} where   id=#{id} 	</update>
	
	    	<delete id="delete" parameterType="long">
    		delete from panic_buying_product where id=#{id}
    	</delete>
	</mapper>